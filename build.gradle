/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'checkstyle'
    id 'jacoco'
    id 'java'
    id 'idea'
    id 'io.ebean' version '13.6.5'
}

group = 'hexlet.code'
version = '1.0-SNAPSHOT'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    implementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation group: 'io.javalin', name: 'javalin', version: '4.6.4'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.31'

// add the Ebean dependencies
    implementation 'io.ebean:ebean:13.6.5'
    implementation 'io.ebean:ebean-querybean:13.8.1'
    // query bean generation
//    annotationProcessor 'io.ebean:querybean-generator:12.15.1'
    annotationProcessor 'io.ebean:querybean-generator:13.6.5'
    implementation 'io.ebean:ebean-ddl-generator:13.6.5'
    implementation 'io.ebean:ebean-migration:13.0.0'
    implementation 'io.ebean:ebean-annotation:8.1'
    testImplementation 'io.ebean:ebean-test:13.6.5'

    // for H2 DB
    implementation 'com.h2database:h2:2.1.214'
    implementation group: 'commons-collections', name: 'commons-collections', version: '3.2'
    testImplementation group: 'junit', name: 'junit', version: '4.+'

    // for postgres DB
    implementation 'org.postgresql:postgresql:42.5.0'

// NOTE: ebean-ddl-generator требует старые зависимости, которых нет в java 9 и выше
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.5'
    implementation 'javax.activation:activation:1.1.1'

//    Thymeleaf - Шаблонизатор
    implementation 'org.thymeleaf:thymeleaf:3.0.15.RELEASE'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.1.0'
    // позволяет создавать общие макеты и переиспользовать их

    implementation 'org.thymeleaf.extras:thymeleaf-extras-java8time:3.0.4.RELEASE'
    // добавляет в шаблоны объект temporals со множеством полезных методов по форматированию

//    Для оформления страниц веб-приложения будем использовать фреймворк bootstrap
    implementation 'org.webjars:bootstrap:5.1.3'
}

application {
    // Define the main class for the application.
    mainClass = 'hexlet.code.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    jacoco {
        enabled = true
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}
jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

compileJava {
    options.release = 17
}

task stage(dependsOn: ['clean', 'installDist'])
installDist.mustRunAfter clean

//task copyToLib(type: Copy) {
//    into "$buildDir/libs"
//    from(configurations.compileClasspath)
//}
//
//stage.dependsOn(copyToLib)

jar {
    manifest {
        attributes(
//                'Class-Path': configurations.compileClasspath.collect { it.getName() }.join(' '),
                'Main-Class': 'hexlet.code.App'
        )
    }

    configurations.implementation.setCanBeResolved(true)
    from { configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) } }
    duplicatesStrategy = 'include'
}

task generateMigrations(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'hexlet.code.MigrationGenerator'
}

